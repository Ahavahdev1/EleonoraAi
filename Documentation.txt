Code Documentation
Overview
This code implements a chatbot named GroqDuckDuckGoBot that uses the Groq API for natural language processing and the DuckDuckGo API for web searches. The bot can generate responses to user queries and perform online searches as needed.

Requirements
Python 3.x
Libraries:
groq
duckduckgo_search
Environment Variables:
GROQ_API_KEY: Groq API key for authentication
Code Structure
Imports
python
Copy code
import os
from groq import Groq
from duckduckgo_search import DDGS
from datetime import date
os: For environment variable manipulation.
Groq: Library for interacting with the Groq API.
DDGS: Library for performing searches with DuckDuckGo.
date: For obtaining the current date.
GroqDuckDuckGoBot Class
Constructor
python
Copy code
class GroqDuckDuckGoBot:
    def __init__(self, model_name="llama3-8b-8192"):
        self.groq_client = Groq(api_key=os.environ.get("GROQ_API_KEY"))
        self.model_name = model_name
model_name (optional): Name of the Groq model to be used.
self.groq_client: Instance of the Groq class configured with the API key.
self.model_name: Name of the model used for chat completions.
chat Method
python
Copy code
def chat(self, message, history=[]):
    today = date.today()
    message = f"Remember that you are connected to the internet and have access to real-time information. Use your resources to provide accurate and relevant answers to the user, considering todayâ€™s date, {today.strftime('%d de %B de %Y')}. {message}"

    messages = [{ "role": "user", "content": message }] + history
    chat_completion = self.groq_client.chat.completions.create(
        messages=messages,
        model=self.model_name,
    )
    response = chat_completion.choices[0].message.content

    if "search" in response:
        parts = response.split("search: ")
        if len(parts) >= 2:
            search_term = parts[1].strip()
            search_results = self.perform_search(search_term)
            if search_results:
                response += f"\n\n**Search Results:**\n"
                for result in search_results:
                    response += f"- {result['href']} - {result['title']}\n"
    else:
        search_results = self.perform_search(message)
        if search_results:
            response += f"\n\n**Search Results:**\n"
            for result in search_results:
                response += f"- {result['href']} - {result['title']}\n"
    return response
message: The user's message.
history: Previous message history for context (optional).
Adds a note about the current date and real-time access to information to the message.
Uses the Groq client to obtain a response based on the model.
If the response contains "search:", performs a search using DuckDuckGo and appends the results to the response.
If it does not contain "search:", performs a search with the original message and appends the results to the response.
Returns the final response to the user.
perform_search Method
python
Copy code
def perform_search(self, query):
    with DDGS() as ddgs:
        results = ddgs.text(query)
        return results
query: Search term.
Uses the DuckDuckGo client to perform the search and returns the results.
Setup and Execution
python
Copy code
os.environ["GROQ_API_KEY"] = "GROQ_API_KEY_HERE"

bot = GroqDuckDuckGoBot()

while True:
    user_input = input("You: ")
    if user_input.lower() == "exit":
        break
    response = bot.chat(user_input)
    print("Bot:", response)
Sets the Groq API key as an environment variable.
Creates an instance of GroqDuckDuckGoBot.
Runs a loop to receive user input, generate a response using the bot, and display the response.
The loop terminates when the user types "exit".